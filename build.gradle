plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
    // querydsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "com.github.node-gradle.node" version "2.2.3"
}

group = 'com.mogaco'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    // querydsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.github.node-gradle:gradle-node-plugin:2.2.4'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

// querydsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

def webappDir = "$projectDir/frontend"

node {
    version = '14.4.0'
    // Version of npm to use.
    npmVersion = '6.14.4'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
    nodeModulesDir = file("${webappDir}")
}

task appNpmInstall(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ["run", "build"]
}

task copyWebApp(type: Copy) {
    from "frontend/build"
    into 'build/resources/main/static/.'
}

copyWebApp.dependsOn(appNpmInstall)
compileJava.dependsOn(copyWebApp)
